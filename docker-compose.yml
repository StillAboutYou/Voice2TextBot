services:
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./rabbitmq-init:/etc/rabbitmq-init:ro

  postgres:
    image: postgres:15
    env_file:
      - .env
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h postgres -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio
    container_name: minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    command: server /data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - minio_data:/data
      - minio_config:/root/.minio

  createbuckets:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY};
      mc mb myminio/${MINIO_BUCKET};
      exit 0;
      "

  migrate:
    build:
      context: .
      dockerfile: alembic/Dockerfile
    env_file:
      - .env
    environment:
      POSTGRES_PORT: 5432
      POSTGRES_HOST: postgres
    depends_on:
      postgres:
        condition: service_healthy

  bot:
    build:
      context: .
      dockerfile: bot/Dockerfile
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy  # Ждём готовности RabbitMQ
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: on-failure  # Перезапуск при ошибке подключения
    # command: ["poetry", "run", "python", "-m", "bot.bot"]

  consumer:
    build:
      context: .
      dockerfile: core/Dockerfile
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: always
    # command: ["python3.10", "-m", "core.consumer"]

volumes:
  minio_data:
  minio_config:
